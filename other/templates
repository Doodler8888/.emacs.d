emacs-lisp-mode
(u "(use-package " p "\\)")

emacs-lisp-mode
(uu
  "(use-package " p n>
    ":ensure t" n>
    ":config" n>
    "  " p n>
    ")")

yaml-mode
(d
    "apiVersion: apps/v1" n
    "kind: Deployment" n
    "metadata:" n
    "  name: " (p "my-deployment") n
    "  namespace: " (p "default") n
    "  labels:" n
    "    app: " (p "my-app") n
    "spec:" n
    "  replicas: " (p "1") n
    "  selector:" n
    "    matchLabels:" n
    "      app: " (p "my-app") n
    "  template:" n
    "    metadata:" n
    "      labels:" n
    "        app: " (p "my-app") n
    "    spec:" n
    "      containers:" n
    "      - name: " (p "my-container") n
    "        image: " (p "nginx:latest") n
    "        ports:" n
    "        - containerPort: " (p "80") n
    "        resources:" n
    "          limits:" n
    "            cpu: " (p "500m") n
    "            memory: " (p "512Mi") n
    "          requests:" n
    "            cpu: " (p "200m") n
    "            memory: " (p "256Mi"))

yaml-mode
(pv
    "apiVersion: v1" n
    "kind: PersistentVolume" n
    "metadata:" n
    "  name: " (p "my-pv") n
    "  labels:" n
    "    type: " (p "local") n
    "spec:" n
    "  storageClassName: " (p "manual") n
    "  capacity:" n
    "    storage: " (p "10Gi") n
    "  accessModes:" n
    "    - " (p "ReadWriteOnce") n
    "  persistentVolumeReclaimPolicy: " (p "Retain") n
    "  hostPath:" n
    "    path: " (p "/data/my-pv"))

yaml-mode
(pvc
    "apiVersion: v1" n
    "kind: PersistentVolumeClaim" n
    "metadata:" n
    "  name: " (p "my-pvc") n
    "  namespace: " (p "default") n
    "spec:" n
    "  storageClassName: " (p "standard") n
    "  accessModes:" n
    "    - " (p "ReadWriteOnce") n
    "  resources:" n
    "    requests:" n
    "      storage: " (p "5Gi"))

yaml-mode
(service
    "apiVersion: v1" n
    "kind: Service" n
    "metadata:" n
    "  name: " (p "my-service") n
    "  namespace: " (p "default") n
    "spec:" n
    "  selector:" n
    "    app: " (p "my-app") n
    "  ports:" n
    "  - protocol: " (p "TCP") n
    "    port: " (p "80") n
    "    targetPort: " (p "8080") n
    "  type: " (p "ClusterIP"))

yaml-mode
(statefulset
    "apiVersion: apps/v1" n
    "kind: StatefulSet" n
    "metadata:" n
    "  name: " (p "my-statefulset") n
    "spec:" n
    "  selector:" n
    "    matchLabels:" n
    "      app.kubernetes.io/name: " (p "my-app") n
    "  replicas: " (p "1") n
    "  template:" n
    "    metadata:" n
    "      labels:" n
    "        app.kubernetes.io/name: " (p "my-app") n
    "    spec:" n
    "      containers:" n
    "      - name: " (p "my-container") n
    "        image: " (p "nginx:latest") n
    "        ports:" n
    "          - containerPort: " (p "80") n
    "        volumeMounts:" n
    "          - name: " (p "data-volume") n
    "            mountPath: " (p "/data") n
    "      volumes:" n
    "        - name: " (p "data-volume") n
    "          persistentVolumeClaim: " n
    "            claimName: " (p "my-pvc") n
    "  serviceName: " (p "my-statefulset-service"))

yaml-mode
(test
    "apiVersion: apps/v1" n
    "kind: Deployment" n
    "metadata:" n
    "  name: " (p "deployment name" (my/select-placeholder)) n
    "  namespace: " (p "namespace name" (my/select-placeholder)) n
    "  labels:" n
    "    app: " (p "label value" (my/select-placeholder)) n)


my-yaml-mode
(root
  "securityContext:" n
  "  runAsUser: 0")

yaml-mode
(name
	"app.kubernetes.io/name: "
)

python-ts-mode
(srsc
	"subprocess.run(\"" p "\", shell=True, check=True)"
)

yaml-mode
(secret
  "apiVersion: v1" n
  "kind: Secret" n
  "metadata:" n
  "  name: " (p "secret_name") n
  "  namespace: " (p "default") n
  "data:" n
  "  username: " "value" n
  "  password: " "value" n
  "type: " (p "opaque"))

python-ts-mode
(sr
	"subprocess.run(\"" p "\", shell=True, check=True, capture_output=True)"
	)

(main
    "if __name__ == \"__main__\":" n
    "    main()"
)

python-ts-mode
(pt
  "print(f\"This is " p ": {" p "}\")")
